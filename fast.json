{
  "swagger": "2.0",
  "info": {
    "description": "Fast-Food-Fast is a food delivery service app for a restaurant. A user can create an account, signin to the account and make orders for food items.",
    "version": "1.0.0",
    "title": "FAST-FOOD-FAST",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "davidessienshare@gmail.com"
    },
    "license": {
      "name": "GNU General Public License",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    }
  },
  "host": "latia-ef352.web.app",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "auth",
      "description": "User authentication",
      "externalDocs": {
        "description": "User signin and signup",
        "url": "https://latia-ef352.web.app"
      }
    },
    {
      "name": "orders",
      "description": "Everything about user orders",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://latia-ef352.web.app"
      }
    },
    {
      "name": "menu",
      "externalDocs": {
        "description": "All about meals",
        "url": "https://latia-ef352.web.app"
      }
    },
    {
      "name": "user",
      "description": "User operations",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "https://latia-ef352.web.app"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/orders": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Place an order",
        "description": "User can place order for meals",
        "operationId": "placeOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "The order the user wants to place",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order placed successfully"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "write:orders"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get all orders",
        "description": "Return all orders from the database",
        "operationId": "getAllOrders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got orders"
          },
          "404": {
            "description": "Orders not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:orders"
            ]
          }
        ]
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Find order by ID",
        "description": "Returns a single order",
        "operationId": "getOrderById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful got order",
            "schema": {
              "$ref": "#/definitions/Order2"
            }
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:orders"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "Updates the orders status",
        "description": "The order status can either be Canceled or Accepted or Rejected",
        "operationId": "updateOrderStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Updated status of the order",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Order updated successfully",
            "schema": {
              "$ref": "#/definitions/Order2"
            }
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:orders"
            ]
          }
        ]
      }
    },
    "/api/v1/users/{userId}/orders": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find order by ID",
        "description": "Returns a single order",
        "operationId": "getUserHistory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of of the user who's order history is to be returned",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful got order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:orders"
            ]
          }
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Enables a user to signup",
        "description": "Registers a new user",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User2"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Account created successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Enables a user to signin",
        "description": "Authenticate a user",
        "operationId": "signin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "You have been logged in successfully!"
          },
          "401": {
            "description": "Could not login. The email and password do not match",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/menu": {
      "post": {
        "tags": [
          "menu"
        ],
        "summary": "Add a meal to the menu",
        "description": "",
        "operationId": "postMenu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "new meal",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Meal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meal added successfully",
            "schema": {
              "$ref": "#/definitions/Meal2"
            }
          },
          "404": {
            "description": "Sorry! Meal not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "write:menu"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "menu"
        ],
        "summary": "Get all meals",
        "description": "",
        "operationId": "getMenu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Menu gotten successfuly",
            "schema": {
              "$ref": "#/definitions/Meal3"
            }
          },
          "404": {
            "description": "Could not get menu"
          }
        }
      }
    },
    "/menu/{mealId}": {
      "get": {
        "tags": [
          "menu"
        ],
        "summary": "Find meal by ID",
        "description": "Returns a single meal",
        "operationId": "getMealById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mealId",
            "in": "path",
            "description": "ID of meal to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful got meal",
            "schema": {
              "$ref": "#/definitions/Meal2"
            }
          },
          "404": {
            "description": "Meal not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:menu"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "fast_food_fast_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://latia-ef352.web.app/api/v1/auth/signin",
      "flow": "implicit",
      "scopes": {
        "write:orders": "place orders",
        "read:orders": "get orders",
        "write:menu": "add a meal",
        "read:menu": "get menu"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "recipientId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "total_cost": {
          "type": "integer",
          "format": "int32"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "udated": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "Pending",
            "Acceted",
            "Rejected",
            "Canceled"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "item": {
                "type": "string"
              },
              "quantity": {
                "type": "integer"
              },
              "price": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            }
          }
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "Order2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "recipientId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "total_cost": {
          "type": "integer",
          "format": "int32"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "udated": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "Pending",
            "Acceted",
            "Rejected",
            "Canceled"
          ]
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "Order3": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "recipientId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "total_cost": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "udated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "Pending",
              "Acceted",
              "Rejected",
              "Canceled"
            ]
          }
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "fullname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "integer"
        },
        "address": {
          "type": "string"
        },
        "phone": {
          "type": "integer"
        },
        "status": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "User2": {
      "type": "object",
      "properties": {
        "fullname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Signin": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Meal": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Meal2": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "udated_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Meal3": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "udated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "xml": {
        "name": "User"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
